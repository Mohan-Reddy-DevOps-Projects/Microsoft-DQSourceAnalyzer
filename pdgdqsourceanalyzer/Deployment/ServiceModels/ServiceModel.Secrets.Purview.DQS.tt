<#@ include file="$(ManifestPath)\\ManifestHelper.ttinclude" once="true" #>
<#
foreach (var environment in environments)
{
#>
{
  "$schema": "http://schema.express.azure.com/schemas/2015-01-01-alpha/ServiceModel.json",
  "contentVersion": "1.0.0.0",
  "ServiceMetadata": {
    "ServiceGroup": "Purview.DQS.Secrets",
    "Environment": "<#= environment["name"] #>"
  },
  "ServiceResourceGroupDefinitions": [
  {
    "Name": "Purview.DQS.Secrets.Group",
    "ServiceResourceDefinitions": [
    {
      "Name": "Purview.DQS.Secrets.Resource",
      "ComposedOf":
       {
         "Extension":
          {
            "rolloutParametersPath": "Parameters\\generated\\Parameters.Secrets.Purview.DQS.<#= GetUpperCaseEnvironmentShortName(environment) #>.<#= environment["shortLocation"] #>.json",
            "allowedTypes": [
            { 
              "Type": "Microsoft.KeyVault.DataPlane/CreateCertificate" 
            }]
          }
       }
    }]
  }],
  "ServiceResourceGroups": [
  {
    "AzureResourceGroupName": "<#= GetInfraResourceGroup(environment) #>",
    "Location": "<#= environment["location"] #>",
    "InstanceOf": "Purview.DQS.Secrets.Group",
    "AzureSubscriptionId": "<#= environment["subscription"] #>",
    "ScopeTags": [ { "name": "<#= environment["location"] #>" } ],
    "ServiceResources": [
    {
      "Name": "Purview.DQS.Secrets",
      "InstanceOf": "Purview.DQS.Secrets.Resource"
    }]
  }]
}
<#
  string fileName = String.Format("ServiceModel.Secrets.Purview.DQS.{0}.{1}.json", environment["shortName"], environment["shortLocation"]);
  SaveOutput("ServiceModels\\generated", fileName);
}
#>
Unused generated text file