@include kubernetes.conf

# IfxAudit Configuration
<source>
  @label @IFXAUDITLOG
  @type tail
  path /var/log/containers/*.log
  pos_file /var/log/fluentd-containers-ifxaudit.log.pos
  tag kubernetes.*
  <parse>
    @type multi_format
    # Read logs in JSON format for Kubernetes v1.18-
    <pattern>
      format json
      time_format "%Y-%m-%dT%H:%M:%S.%NZ"
      keep_time_key true
    </pattern>
    # Reads logs in CRI format for Kubernetes v1.19+
    # The CRI format is documented here: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/kubelet-cri-logging.md
    <pattern>
      format regexp
      expression /^(?<time>.+) (?<stream>stdout|stderr)( (?<logtag>.))? (?<log>.*)$/
      time_format '%Y-%m-%dT%H:%M:%S.%N%:z'
      keep_time_key true
    </pattern>
  </parse>
  read_from_head true
</source>
<label @IFXAUDITLOG>
    <filter kubernetes.var.log.containers.**.log>
        @type kubernetes_metadata
    </filter>
    # Make the IfxAuditLogs JSON parsable
    <filter kubernetes.var.log.containers.purview-dqs**purview-dqs**.log>
        @type grep  
        <regexp>
            key log
            pattern /^ifxaudit(appl|mgmt|fail):.*/
        </regexp>
    </filter>
    <filter kubernetes.var.log.containers.purview-dqs**purview-dqs**.log>
        @type record_modifier  
        <record>    
        _temp_ ${ if record.has_key?("log"); record["message"] = record["log"]; record["log"] = record["log"].to_s.gsub(/ifxaudit(appl|mgmt|fail):/,''); end; nil }
        _temp2_ ${ if record.has_key?("message"); if record["message"].to_s.start_with?("ifxauditappl"); record["ifxaudittype"] = "application"; end; nil; if record["message"].to_s.start_with?("ifxauditmgmt"); record["ifxaudittype"] = "management"; end; nil; if record["message"].to_s.start_with?("ifxauditfail"); record["ifxaudittype"] = "error"; end; nil; end; nil }
        </record>
        remove_keys _temp_, _temp2_
    </filter>
    <filter kubernetes.var.log.containers.purview-dqs**purview-dqs**.log>
        @type parser
        key_name log
        <parse>
            @type json
            json_parser json
        </parse>
        reserve_data true # this preserves fields from the original record
        remove_key_name_field true # this removes the log field if successfully parsed as JSON
        reserve_time # the time was already parsed in the source, we don't want to overwrite it with current time.
        emit_invalid_record_to_error false # In case of unparsable log lines or CRI logs. Keep fluentd's error log clean
    </filter>
    # Flatten the records and remove unnecessary fields
    <filter kubernetes.var.log.containers.purview-dqs**purview-dqs**.log>
        @type record_transformer
        enable_ruby   
        <record>    
            ContainerName ${record["kubernetes"]["container_name"]}
            NamespaceName ${record["kubernetes"]["namespace_name"]}    
            PodName ${record["kubernetes"]["pod_name"]}
            Node ${record["kubernetes"]["host"]}
            MasterUrl ${record["kubernetes"]["master_url"]}
        </record>
        remove_keys docker,kubernetes,stream
    </filter>
    # 'dataqualityifxaudit' tag is used as the event source name in MDSD configuration
    <match kubernetes.var.log.containers.purview-dqs**purview-dqs**.log>
        @type rewrite_tag_filter
        <rule>
        key     message
        pattern ^ifxaudit(appl|mgmt|fail):.*
        tag     dataqualityifxaudit
        </rule>
    </match>
    # Send dataqualityifxaudit events to MDSD
    <match dataqualityifxaudit.**>
        @type mdsd
        @log_level info
        djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
        acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
        mdsd_tag_regex_patterns ["dataqualityifxaudit"]  # fluentd tag patterns whose match will be used as mdsd source name
        num_threads 1
        buffer_chunk_limit 1000k
        buffer_type file
        buffer_path /var/log/td-agent/buffer/out_dataqualityifxaudit*.buffer
        buffer_queue_limit 128
        flush_interval 10s
        retry_limit 3
        retry_wait 10s
    </match>
</label>

# Retag to prefix purview-dqs-metadata container events with "purview-dqs-metadata"
<match kubernetes.var.log.containers.purview-dqs-metadata**purview-dqs-metadata**.log>
  @type rewrite_tag_filter
  <rule>
    key     EventName
    pattern ^DQMetadataEvent$
    tag     dqmetadata.$1
  </rule>
</match>

# Retag to prefix purview-dqvalidation container events with "purview-dqvalidation"
<match kubernetes.var.log.containers.purview-dqvalidation**purview-dqvalidation**.log>
  @type rewrite_tag_filter
  <rule>
    key     ContainerName
    pattern ^purview-dqvalidation$
    tag     dqvalidation.$1
  </rule>
</match>

# Retag to prefix purview-dqs container events with "purview-dqs"
<match kubernetes.var.log.containers.purview-dqs**purview-dqs**.log>
  @type rewrite_tag_filter
  <rule>
    key     EventName
    pattern ^DQSJobStatusLogEvent$
    tag     dqjobstatus.$1
  </rule>
  <rule>
    key     EventName
    pattern ^DQSLogEvent$
    tag     dataquality.$1
  </rule>
  <rule>
    key     EventName
    pattern ^LoggingJobEvent$
    tag     dqresourcestack.$1
  </rule>
  <rule>
    key     EventName
    pattern ^DQSBackgroundLogEvent$
    tag     dqbackgroundjob.$1
  </rule>
  <rule>
    key     EventName
    pattern ^DQSAPIInLogEvent$
    tag     dqapirequest.$1
  </rule>
  <rule>
    key     EventName
    pattern ^DQSTelemetryLogEvent$
    tag     dqtelemetry.$1
  </rule>
</match>

# Retag to prefix all other container events with k8scontainers
<match kubernetes.var.log.containers.**.log>
  @type rewrite_tag_filter
  <rule>
    key     ContainerName
    pattern ^(.+)$
    tag     k8scontainers.$1
  </rule>
</match>

# Send purview-dqs events to MDSD
<match dataquality.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dataquality"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dataquality*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send purview-dqs-metadata events to MDSD
<match dqmetadata.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dqmetadata"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dqmetadata*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send purview-dqvalidation events to MDSD
<match dqvalidation.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dqvalidation"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dqvalidation*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send purview-dqs events to MDSD
<match dqjobstatus.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dqjobstatus"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dqjobstatus*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send purview-dqs events to MDSD
<match dqresourcestack.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dqresourcestack"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dqresourcestack*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send purview-dqs events to MDSD
<match dqbackgroundjob.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dqbackgroundjob"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dqbackgroundjob*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send purview-dqs events to MDSD
<match dqapirequest.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dqapirequest"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dqapirequest*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send purview-dqs events to MDSD
<match dqtelemetry.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^dqtelemetry"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_dqtelemetryt*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Send all other kubernetes container events to MDSD
<match k8scontainers.**>
  @type mdsd
  @log_level info
  djsonsocket /var/run/mdsd/default_djson.socket  # Full path to mdsd dynamic json socket file
  acktimeoutms 5000  # max time in milliseconds to wait for mdsd acknowledge response. If 0, no wait.
  mdsd_tag_regex_patterns ["^k8scontainers"]  # fluentd tag patterns whose match will be used as mdsd source name
  num_threads 1
  buffer_chunk_limit 1000k
  buffer_type file
  buffer_path /var/log/td-agent/buffer/out_k8scontainers*.buffer
  buffer_queue_limit 128
  flush_interval 10s
  retry_limit 3
  retry_wait 10s
</match>

# Anything else goes to standard output
<match **>
  @type stdout
</match>