<#@ include file="$(ManifestPath)\\ManifestHelper.ttinclude" once="true" #>
<#
foreach (var environment in environments)
{
#>
# # Geneva properties
gcs_cloud_name: <#= GetEnvironmentType(environment)["cloudName"] #>
gcs_environment: <#= GetEnvironmentType(environment)["gcsEnvironment"] #> 
gcs_account: <#= GetEnvironmentType(environment)["gcsAccount"] #> 
gcs_region: <#= GetCompactLocation(environment) #>
gcs_namespace: <#= GetEnvironmentType(environment)["gcsNamespace"] #> 
gcs_config_version: <#= GetEnvironmentType(environment)["gcsVersion"] #>        # Must match the logs namespace configuration version from the Geneva Jarvis management portal
gcs_keyvault_name: <#= GetKeyVaultName(environment) #>
gcs_keyvault_tenant: <#= GetTenantId(environment) #>
gcs_cert_name: <#= GetGenevaCertSecretName(environment) #>
gcs_cert_san: <#= GetGenevaCertSubjectName(environment) #>                      

# # Leave metric_endpoint commented out for PROD environment. Uncomment it for INT environment.
# # metricEndpoint: https://az-int.metrics.nsatc.net/

# # You should override these with the latest version of the Geneva images available here:
# # https://genevamondocs.azurewebsites.net/collect/references/linuxcontainers.html
# # https://eng.ms/docs/products/geneva/collect/references/linuxcontainers
# # MDSD, MDM, FluentD are Distroless Containers and AzSecPack is Standard Geneva Container (Ubuntu)
mdsd:
  dockerTag: $(GenevaMdsdMarinerVersion)
  genevaACR: linuxgeneva-microsoft.azurecr.io/distroless/genevamdsd
fluentd:
  dockerTag: $(GenevaFluentDMarinerVersion)
  genevaACR: linuxgeneva-microsoft.azurecr.io/distroless/genevafluentd
mdm:
  dockerTag: $(GenevaMdmMarinerVersion)
  genevaACR: linuxgeneva-microsoft.azurecr.io/distroless/genevamdm

dqs:
  tlsDNS: <#= GetDataQualityServerCertSubjectName(environment) #>
  instances: <#= GetPodNumber(environment) #>                    # This should match the number of VMs in the cluster
  allowedServiceTags: "<#= GetEnvironmentType(environment)["allowedServiceTags"] #>"
  appSettings:
    {
      "Logging": {
        "LogLevel": {
          "Default": "Information",
          "Microsoft": "Warning",
          "Microsoft.Hosting.Lifetime": "Information"
        }
      },  
      "EnvironmentConfig": {
        "Environment": "<#= GetTargetEnvironment(environment)["name"] #>",
        "Location": "<#= GetCompactLocation(environment) #>"
      },
      "AllowedHosts": "*",

      "ClientCertificateConfig": {
        "AuthorizedCallers": [
          {
            "Subject": "gateway-<#= ToLower(GetEffectiveEnvShortName(environment)) #>-client.babylon.<#= GetAzureZone(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "Gateway"
          },
          {
            "Subject": "provision.purview-dg.<#= GetAzureZone(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "ProvisioningService"
          },
          {
            "Subject": "rp.<#= GetDNSZone(environment) #>-ame.<#= GetAzureZone(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "ResourceProvider"
          },
          {
            "Subject": "<#= GetGenevaActionAuthorizedSubject(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "GenevaAction"
          },
          {
            "Subject": "<#= GetDGGenevaActionAuthorizedSubject(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "GenevaAction"
          },
          {
            "Subject": "<#= GetCompactLocationForPfs(environment) #>.purviewflow-service.purview.<#= GetAzureZone(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "PurviewFlow"
          },
          {
            "Subject": "workflow-client-<#= GetCompactLocationForPfs(environment) #>.workflow.purview.azure.com",
            "Issuer": "AME",
            "CallerCategory": "WorkflowService"
          },
          {
            "Subject": "<#= GetDataQualityClientCertSubjectName(environment) #>",
            "Issuer": "AME", 
            "CallerCategory": "DQS"
          },
          {
            "Subject": "<#= GetLogicAppClientCertSubjectName(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "DQLogicApp"
          },
          {
            "Subject": "<#= GetDEHClientCertSubjectName(environment) #>",
            "Issuer": "AME",
            "CallerCategory": "DEH"
          },
          <#= GetAllDataQualityJobManagerCertName(environment) #>
        ]
      },
      "ServerConfig": {
        "Port": 443,
        "KeyVaultUri": "https://<#= GetKeyVaultName(environment) #>.vault.azure.net/",
        "SecretName": "<#= GetServerCertSecretName(environment) #>",
        "RefreshRate": "1.00:00:00"
      },
      "SecretsConfiguration": {
        "KeyVaultUri": "https://<#= GetKeyVaultName(environment) #>.vault.azure.net/",
        "SecretNamesList": [
          "blobConnectionString",
          "sparkexternalcomputekey",
          "datastoreCredentials",
          "dq-aisafety"
        ]
      },
      "CertificatesConfiguration": {
        "KeyVaultUri": "https://<#= GetKeyVaultName(environment) #>.vault.azure.net/",
        "RefreshRate": "1.00:00:00",
        "CertificateList": [
          "ClientCertificate:<#= GetClientCertSecretName(environment) #>",
          "MEOClientCertificate:<#= GetMEOClientCertificateName(environment) #>"
        ]
      },
      "GenevaMetricConfig": {
        "Account": "<#= GetEnvironmentType(environment)["gcsAccount"] #>",
        "DefaultMetricsNamespace": "<#= GetEnvironmentType(environment)["gcsNamespace"] #>",
        "Host": "geneva-services",
        "Port": 8125,
        "Environment": "<#= GetTargetEnvironment(environment)["name"] #>",
        "Location": "<#= GetCompactLocation(environment) #>"
      },  
      "PurviewConfiguration" : {
          "ManagementBaseUri": "<#= GetPurviewAccountUri(environment) #>",
          "enableSDK": true,
          "ApiVersion": "2019-11-01-preview",
          "PurviewFirstPartyApp": {
            "ApplicationId": "<#= GetEnvironmentType(environment)["PurviewFirstPartyAppId"] #>",
            "Resource": "<#= GetEnvironmentType(environment)["PurviewFirstPartyResource"] #>",
            "CertificateName": "ClientCertificate",
            "TenantId": "<#= GetEnvironmentType(environment)["PurviewFirstPartyTenant"] #>",
            "Authority": "<#= GetPurviewFirstPartyAppAuthority(environment) #>",
            "AzureRegion": "<#= GetCompactLocation(environment) #>"
          }
      }, 
      "AuthorizationConfiguration.ArtifactStore": {
       "AppId": "<#= GetEnvironmentType(environment)["PurviewFirstPartyAppId"] #>",
       "AuthenticationSubject": "",
       "Authority": "<#= GetEnvironmentType(environment)["ArtifactServiceAuthorityUri"] #>/<#= GetEnvironmentType(environment)["PurviewFirstPartyTenant"] #>",
       "TenantId": "<#= GetEnvironmentType(environment)["PurviewFirstPartyTenant"] #>",
       "Resource": "<#= GetEnvironmentType(environment)["ArtifactServiceResource"] #>",
       "CertificateName": "",
       "BaseManagementUri": "<#= GetArtifactStoreBaseManagementUri(environment) #>",
       "AzureRegion": "<#= GetCompactLocation(environment) #>"
      }, 
      "MicrosoftGraphServiceConfiguration": {
       "BaseManagementUri": "<#= GetMicrosoftGraphEndpoint(environment) #>",
       "Authority": "<#= GetMicrosoftGraphAuthorityBaseUri(environment) #>",
       "Scopes": [
          "<#= GetMicrosoftGraphEndpoint(environment) #>/.default"
        ]
      },
      "DQConfiguration": {
        "BaseManagementUri": "<#= GetMetadataBaseManagementUri(environment) #>",
        "InternalClusterUri": "<#= GetMetadataInternalclusterUri(environment) #>",
        "CertificateName": "ClientCertificate",
        "OldProxyServiceUri": "<#= GetOldDQSBaseManagementUri(environment) #>"
      },
      "DEHConfiguration": {
        "BaseManagementUri": "<#= GetDEHBaseManagementUri(environment) #>"
      },
      "PfsConfiguration": {
        "BaseManagementUri": "<#= GetPfsBaseManagementUri(environment) #>",
        "CertificateName": "ClientCertificate"
      },    
      "CatalogConfiguration": {
        "BaseManagementUri": "<#= GetCatalogBaseManagementUri(environment) #>",
        "CertificateName": "ClientCertificate"
      },
      "DGCatalogConfiguration": {
        "BaseManagementUri": "<#= GetDGCatalogBaseManagementUri(environment) #>",
        "CertificateName": "ClientCertificate"
      },
      "DQJMRegionConfiguration": {
        "RegionConfig": <#= GetCrossRegionMapConfig(environment) #>,
      },
      "JobCompletionQueueConfiguration": {
        "AccountName": "<#= GetStorageAccountName(environment) #>",
        "QueueName": "jobcompletionv2",
        "QueueRequestTimeout": "00:00:59",
        "QueueRetryCount": "3",
        "QueueVisibilityTimeout": "00:00:10:00.00",
        "TimeToLive": "1.00:00:00",
      },
      "AlertConsumerConfiguration": {
        "InitialStartDelay": "00:00:01:00",
        "WaitAfterSuccessInterval": "00:00:00:00.01",
        "WaitAfterQueueEmptyInterval": "00:00:00:30",
        "WaitAfterFirstErrorInterval": "00:00:00:30"
      },
      "ValidationService": {
        "Uri": "<#=GetValidationServiceURI(environment)#>"
      },
      "JobManagementConfig": {
        "storageAccountName": "<#= GetStorageAccountName(environment) #>",
        "storageArmEndpoint": "https://management.azure.com",
        "storageAuthority": "https://login.microsoftonline.com/",
        "storageResourceGroup": "<#= GetInfraResourceGroup(environment) #>",
        "storageSubscriptionId": "<#= GetSubscriptionId(environment) #>",
        "storageTenantId": "<#= GetTenantId(environment) #>",
        "storageSuffix": "core.windows.net",
        "notificationListenerQueueName": "backgroundjobsqueue",
        "storageTableName": "backgroundjobsworktable",
        "storageQueueNamePrefix": "backgroundjobsqueue",
        "location": "<#= GetCompactLocation(environment) #>",
        "BackgroundJobConnectionString": ""
     },
     "DQStorageAccountConfiguration": {
        "StorageAccountName": "<#= GetStorageAccountName(environment) #>",
        "StorageAccountSubscriptionId": "<#= GetSubscriptionId(environment) #>",
        "StorageAccountResourceGroupName": "<#= GetInfraResourceGroup(environment) #>",
        "StorageAccountAuthority": "https://login.microsoftonline.com/",
        "StorageAccountResourceUri": "https://management.azure.com/subscriptions/<#= GetSubscriptionId(environment) #>/resourceGroups/<#= GetInfraResourceGroup(environment) #>/providers/Microsoft.Storage/storageAccounts/<#= GetStorageAccountName(environment) #>",
        "TenantId": "<#= GetTenantId(environment) #>",
        "Resource": "https://management.azure.com"
     },
     "InsightsEventHubConfiguration": {
        "IsEnabled": <#= GetInsightsEventHubEnablement(environment) #>,
        "EventHubNamespace": "<#= GetInsightsEventHubNamespace(environment) #>",
        "EventHubName": "<#= GetInsightsEventHubName(environment) #>"
     },
     "CatalogEventHubConfiguration": {
        "ProcessingStorageAccountName": "<#= GetStorageAccountName(environment) #>",
        "IsEnabled": <#= GetCatalogEventHubEnablement(environment) #>,
        "EventHubNamespace": "<#= GetCatalogEventHubNamespace(environment) #>",
        "EventHubName": "<#= GetCatalogEventHubName(environment) #>"
     },
     "OnlineMLServiceConfiguration": {
        "AuthMIObjectId":"<#= GetOnlineMLAuthMIObjectId(environment) #>",
        "Host":"<#= GetOnlineMLHost(environment) #>",
        "EndpointName":"<#= GetOnlineMLEndpint(environment) #>",
        "Subscription":"<#= GetOnlineMLSubscription(environment) #>",
        "ResourceGroup":"<#= GetOnlineMLResourceGroup(environment) #>",
        "Workspace":"<#= GetOnlineMLWorkspace(environment) #>",
        "AiSafetyEndpointName":"<#= GetAiSafetyEndpointName(environment) #>",
        "AiSafetyEndpointRegionLoc":"<#= GetAiSafetyEndpointRegionLocationKey(environment) #>"
     },
    "GenevaLog": {
        "Environment": "<#= GetGenevaEnv(environment) #>"
    },
    "GenevaMetrics": {
        "StatsDHost": "geneva-services",
        "Port": 8125,
        "MdmAccountName": "<#= GetEnvironmentType(environment)["gcsAccount"] #>",
        "MdmNamespace": "<#= GetEnvironmentType(environment)["gcsNamespace"] #>",
        "ShoeboxMdmAccountName": "<#= GetGenevaShoeBoxMdmAccountNamespace(environment) #>",
        "ShoeboxMdmNamespace": "<#= GetGenevaShoeBoxMdmAccountName(environment) #>",
        "DefaultDimensions": { "Environment": "<#= GetGenevaEnv(environment) #>" }
    },
    "ClientCertificates": {
        "RefreshRate": "1.00:00:00",
        "Certificates": {
            "ArtifactStoreClient": {
                "KeyVaultUri": "https://<#= GetKeyVaultName(environment) #>.vault.azure.net/",
                "SecretName": "<#= GetClientCertSecretName(environment) #>"
            }
        }
    },
    "ClientCertificate": {
        "KeyVaultUri": "https://<#= GetKeyVaultName(environment) #>.vault.azure.net/",
        "SecretName": "<#= GetClientCertSecretName(environment) #>",
        "RefreshRate": "1.00:00:00"
    },
    "ArtifactStore": {
        "BaseManagementUri": "<#= GetArtifactStoreBaseManagementUri(environment) #>"
    },
    "ConnectivityConfiguration": {
        "BaseManagementUri": "https://wus.connectivity.azure-test.com"
    },
    "PolicyServiceConfiguration": {
        "BaseManagementUri": "<#= GetPolicyStoreBaseManagementUri(environment) #>"
    },
    "ParserConfiguration": {
        "BaseManagementUri": "<#= GetMetadataBaseManagementUri(environment) #>"
    },
    "ExecutionConfiguration": {
        "BaseManagementUri": "<#= GetMetadataBaseManagementUri(environment) #>"
    },
    "LogicAppSchedulerConfiguration": {
        "SubscriptionId": "<#= GetSubscriptionId(environment) #>",
        "ResourceGroup": "<#= GetInfraResourceGroup(environment) #>",
        "LogicAppLocation": "<#= GetCompactLocation(environment) #>",
        "KeyVaultUri": "https://<#= GetKeyVaultLogicAppName(environment) #>.vault.azure.net/",
        "LogicAppManagedIdentityId": "<#= GetLogicAppManagedIdentityId(environment) #>",
        "KeyVaultClientCertName": "<#= GetLogicAppClientCertSecretName(environment) #>",
        "KeyVaultConnectionResourceId": "<#= GetKeyVaultConnectionResourceId(environment) #>",
        "KeyVaultConnectorApiId": "<#= GetKeyVaultConnectorApiId(environment) #>"
    },
    "AzureEnvironment": {
        "ManagementEndpoint": "https://management.core.windows.net/",
        "ResourceManagerEndpoint" : "<#= GetResourceManagementUri(environment) #>"
    },
    "MicrosoftEmailServiceConfiguration": {
        "MEOAppId": "<#= GetMEOAppId(environment) #>",
        "MEOEndpoint": "https://eur.comms.azure.net/api/v2/",
        "MEOAudience": "https://emailorchestrator.onmicrosoft.com/11c28534-b7e2-4e0b-ba01-54777bea593e",
        "MEOAuthority": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47",
        "CertificateName": "MEOClientCertificate"
    },
    "ActionPublisherConfiguration": {
        "BaseManagementUri": "<#= GetDEHBaseManagementUri(environment) #>",
        "CertificateName": "ClientCertificate"
    },
    "SparkJobConfiguration": {
        "MDQSparkExecutionConfiguration": {
            "DriverMemory": "<#= GetMDQSparkDriverMemory(environment) #>",
            "DriverCores": "<#= GetMDQSparkDriverCores(environment) #>",
            "ExecutorMemory": "<#= GetMDQSparkExecutorMemory(environment) #>",
            "ExecutorCores": "<#= GetMDQSparkExecutorCores(environment) #>",
            "NumExecutors": "<#= GetMDQSparkNumExecutors(environment) #>",
            "NodePoolType": "<#= GetMDQNodePoolType(environment) #>"
        },
        "DQSparkExecutionConfiguration": {
            "DriverMemory": "<#= GetDQSparkDriverMemory(environment) #>",
            "DriverCores": "<#= GetDQSparkDriverCores(environment) #>",
            "ExecutorMemory": "<#= GetDQSparkExecutorMemory(environment) #>",
            "ExecutorCores": "<#= GetDQSparkExecutorCores(environment) #>",
            "NumExecutors": "<#= GetDQSparkNumExecutors(environment) #>",
            "MinDynamicExecutor": "<#= GetDQMinDynamicExecutor(environment) #>",
            "MaxDynamicExecutor": "<#= GetDQMaxDynamicExecutor(environment) #>",
            "NodePoolType": "<#= GetDQNodePoolType(environment) #>"
        }
    },
    }
    <#
      string fileName = String.Format("values_dqs_{0}_{1}.yaml",ToLower(environment["shortName"]),ToLower(environment["shortLocation"]));
      SaveOutput("Helm\\dqs\\generated", fileName);
    }
    #>
Unused generated text file